import numpy as np

def kappa_cal(matrix):
    n = np.sum(matrix)
    sum_po = 0
    sum_pe = 0
    for i in range(len(matrix[0])):
        sum_po += matrix[i][i]
        row = np.sum(matrix[i, :])
        col = np.sum(matrix[:, i])
        sum_pe += row*col
    po = sum_po / n
    pe = sum_pe / (n*n)
    # print(po, pe)
    return (po - pe) / (1 - pe)

def recall_AA(matrix):
    recall_rate = 0.0
    n = 0
    for i in range(len(matrix[0])):
        x = matrix[i][i]
        y = np.sum(matrix[i, :])
        recall_rate += x/y
        n += 1

    return recall_rate/n

conf_mat = np.array([[1113,  15,    0,    1,   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,],
 [   4, 1070,    0,    3,   0,    0,    0,    0,    0,    0,   43,   0,    0,    0,     0,],
 [   0,    0,  629,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,],
 [  66,    2,    0, 1033,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,],
 [   0,    0,    0,    0, 1089,    0,    0,    7,   12,    0,    0,    0,    0,    0,     0,],
 [   0,    0,    0,    0,    0,  267,   11,    0,    0,    0,    9,    0,    2,    0,     0,],
 [   0,    0,    5,    0,    0,    0, 1080,    1,    0,    0,   43,    0,    0,   21,     0,],
 [   0,    0,    0,    0,   11,   21,    1,  898,   22,  105,    0,   43,    0,   19,    10,],
 [   0,    0,    2,    0,    0,    0,   14,    0, 1066,   18,  15,  12,    0,    1,     0,],
 [   0,    0,    0,    0,    0,    0,    0,    0,   14, 1052,   20,   25,    0,    0,     0,],
 [   0,    0,   14,   0,    0,    0,   11,    0,    9,   29, 1056,    0,    0,    0,     0,],
 [   0,    0,   42,   0,    0,    0,   29,    3,   13,    4,    6, 1004,    0,    0,     0,],
 [   0,    0,    0,    0,    0,    0,    0,    0,    0,   17,    3,    1,  403,    0,     0,],
 [   0,    0,    0,    0,    0,    0,    0,   11,    2,    0,    0,    0,    0,  374,     0,],
 [   0,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   598]])
conf_mat2 = np.array(
[[1121,    7,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,],
 [  10, 1110,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,],
 [   0,    0,  629,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,],
 [  67,    0,    0, 1034,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,],
 [   0,    0,    0,    0, 1103,    0,    0,    0,    5,    0,    0,    0,    0,    0,     0,],
 [   0,    1,    0,    0,    0,  260,   19,    0,    1,    0,    7,    0,    1,    0,     0,],
 [   0,    7,   0,    0,    0,    0, 1094,    1,    1,    0,   39,    2,    1,    5,     0,],
 [   0,    0,    0,    0,   14,    0,    0, 1018,   22,    0,    0,   47,    0,    9,    20],
 [   0,    0,    0,    0,    0,    0,    4,    0, 1055,   39,   21,    9,    0,    0,     0,],
 [   0,    0,    0,    0,    0,    0,    0,    0,    0, 1099,  12,    0,    0,    0,     0,],
 [   0,    0,    0,    0,    0,    0,    5,   9,    9,   25, 1071,    0,    0,    0,     0,],
 [   0,    0,    0,    0,    0,    0,   34,   0,    8,    3,    0, 1056,    0,    0,     0,],
 [   0,    0,    0,    0,    0,    0,    0,    0,    2,   17,    2,   11,  392,    0,     0,],
 [   0,    0,    0,    0,    0,    0,    0,    5,   0,    0,    0,    0,    0,  382,     0,],
 [   0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   599]]
)
# print("Total Accuracy: ", 0.9627411842980705)
# print("Kappa Coefficient: ", recall_AA(conf_mat2))
# print("Average Accuracy: ", kappa_cal(conf_mat2))